{
	"name": "CartAddedbutNoPurchase",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "NovData2019",
						"type": "DatasetReference"
					},
					"name": "users"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "addtocartbutnopurchase",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "ParseTimestamp"
				},
				{
					"name": "CartOnly"
				},
				{
					"name": "PurchaseOnly"
				},
				{
					"name": "join1"
				},
				{
					"name": "SelectPurchase"
				},
				{
					"name": "AbandonedCartsAgg"
				}
			],
			"scriptLines": [
				"source(output(",
				"          event_time as string,",
				"          event_type as string,",
				"          product_id as string,",
				"          category_id as string,",
				"          category_code as string,",
				"          brand as string,",
				"          price as string,",
				"          user_id as string,",
				"          user_session as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false) ~> users",
				"users derive(event_date = toDate(event_time),",
				"          event_hour = hour(toTimestamp(event_time)),",
				"          weekday = dayOfWeek(toTimestamp(event_time)),",
				"          user_id = toInteger(user_id),",
				"          category_id = toInteger(category_id),",
				"          price = toInteger(price),",
				"          event_time = toTimestamp(event_time, 'yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\''),",
				"          product_id = toInteger(product_id)) ~> ParseTimestamp",
				"ParseTimestamp filter(event_type == 'cart') ~> CartOnly",
				"ParseTimestamp filter(event_type == 'purchase') ~> PurchaseOnly",
				"CartOnly, SelectPurchase join(user_id == purchase_user_id",
				"     && product_id == purchase_product_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"PurchaseOnly select(mapColumn(",
				"          purchase_user_id = user_id,",
				"          purchase_time = event_time,",
				"          purchase_event = event_type,",
				"          purchase_product_id = product_id,",
				"          purchase_category_id = category_id,",
				"          purchase_brand = brand,",
				"          purchase_date = event_date,",
				"          purchase_hour = event_hour,",
				"          purchase_weekday = weekday,",
				"          purchase_time = event_time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectPurchase",
				"join1 aggregate(groupBy(event_date),",
				"     abandoned_carts = count(user_id)) ~> AbandonedCartsAgg",
				"AbandonedCartsAgg sink(allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}