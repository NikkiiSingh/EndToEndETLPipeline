{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "EcomDataFactoryGitHUb"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ecommercegen2.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CartAddedbutNoPurchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "cartaddedbutnopurchase",
						"fileSystem": "processed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FinalOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "uniquevisitors",
						"fileSystem": "processed"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Users')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "user.csv",
						"fileSystem": "rawdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "user_id",
						"type": "String"
					},
					{
						"name": "event_time",
						"type": "String"
					},
					{
						"name": "event_type",
						"type": "String"
					},
					{
						"name": "product_id",
						"type": "String"
					},
					{
						"name": "category",
						"type": "String"
					},
					{
						"name": "brand",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/addtocartbutnopurchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "cartaddedbutnopurchase",
						"fileSystem": "processed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CartAddedbutNoPurchase')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Users",
								"type": "DatasetReference"
							},
							"name": "users"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "addtocartbutnopurchase",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "ParseTimestamp"
						},
						{
							"name": "CartOnly"
						},
						{
							"name": "PurchaseOnly"
						},
						{
							"name": "join1"
						},
						{
							"name": "SelectPurchase"
						},
						{
							"name": "AbandonedCartsAgg"
						}
					],
					"scriptLines": [
						"source(output(",
						"          user_id as string,",
						"          event_time as string,",
						"          event_type as string,",
						"          product_id as string,",
						"          category as string,",
						"          brand as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     ignoreNoFilesFound: false) ~> users",
						"users derive(event_date = toDate(event_time),",
						"          event_hour = hour(toTimestamp(event_time)),",
						"          weekday = dayOfWeek(toTimestamp(event_time)),",
						"          user_id = toInteger(user_id),",
						"          event_time = toTimestamp(event_time, 'yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\''),",
						"          product_id = toInteger(product_id)) ~> ParseTimestamp",
						"ParseTimestamp filter(event_type == 'cart') ~> CartOnly",
						"ParseTimestamp filter(event_type == 'purchase') ~> PurchaseOnly",
						"CartOnly, SelectPurchase join(user_id == purchase_user_id",
						"     && product_id == purchase_product_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"PurchaseOnly select(mapColumn(",
						"          purchase_user_id = user_id,",
						"          purchase_time = event_time,",
						"          purchase_event = event_type,",
						"          purchase_product_id = product_id,",
						"          purchase_category = category,",
						"          purchase_brand = brand,",
						"          purchase_date = event_date,",
						"          purchase_hour = event_hour,",
						"          purchase_weekday = weekday",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPurchase",
						"join1 aggregate(groupBy(event_date),",
						"     abandoned_carts = count(user_id)) ~> AbandonedCartsAgg",
						"AbandonedCartsAgg sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Users')]",
				"[concat(variables('factoryId'), '/datasets/addtocartbutnopurchase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EcomDataFlowwithUsersDS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Users",
								"type": "DatasetReference"
							},
							"name": "RawUserLogs"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FinalOutput",
								"type": "DatasetReference"
							},
							"name": "finalDataDumping",
							"rejectedDataLinkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "ParseTimestamp"
						},
						{
							"name": "UniqueVisitorsperDay"
						}
					],
					"scriptLines": [
						"source(output(",
						"          user_id as string,",
						"          event_time as string,",
						"          event_type as string,",
						"          product_id as string,",
						"          category as string,",
						"          brand as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     inferDriftedColumnTypes: true,",
						"     limit: 100,",
						"     ignoreNoFilesFound: false) ~> RawUserLogs",
						"RawUserLogs derive(event_date = toDate(event_time),",
						"          event_hour = hour(toTimestamp(event_time)),",
						"          weekday = dayOfWeek(toTimestamp(event_time))) ~> ParseTimestamp",
						"ParseTimestamp aggregate(groupBy(event_date),",
						"     unique_visitors = countDistinct(user_id)) ~> UniqueVisitorsperDay",
						"UniqueVisitorsperDay sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1) ~> finalDataDumping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Users')]",
				"[concat(variables('factoryId'), '/datasets/FinalOutput')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CartAddedbutNoPurchase')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CartAddedbutNoPurchase",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CartAddedbutNoPurchase",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"users": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CartAddedbutNoPurchase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UniqueVisitors')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "UniqueVisitors",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EcomDataFlowwithUsersDS",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RawUserLogs": {},
									"finalDataDumping": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/EcomDataFlowwithUsersDS')]"
			]
		}
	]
}